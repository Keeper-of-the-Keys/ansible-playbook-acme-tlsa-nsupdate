- name: Copy certificate to server
  ansible.builtin.copy:
    src: '{{ item.0.local }}'
    dest: '{{ item.1.paths[item.0.selector] | default(item.0.remote) }}'
    #mode: '{{ item.mode | default(omit) }}'
    #group: "{{ item.group | default('root') }}"
    #unsafe_writes: '{{ item.unsafe_writes | default(false) }}'
  loop: '{{ _paths | product(cert.hosts) }}'
  loop_control:
    label: '{{ item.0.selector }}'
  delegate_to: '{{ item.1.name }}'
  vars:
    _paths:
    - local: '{{ acme_defaults.path_local + cert.name }}.crt'
      remote: '{{ acme_defaults.path_remote + cert.name }}.crt'
      selector: 'certificate'
    - local: '{{ acme_defaults.path_local }}keys/{{ cert.name }}.key'
      remote: '{{ acme_defaults.path_remote + cert.name }}.key'
      selector: 'key'
    - local: '{{ acme_defaults.path_local + cert.name }}-intermediate.crt'
      remote: '{{ acme_defaults.path_remote + cert.name }}-intermediate.crt'
      selector: 'intermediate'
    - local: '{{ acme_defaults.path_local + cert.name }}-fullchain.crt'
      remote: '{{ acme_defaults.path_remote + cert.name }}-fullchain.crt'
      selector: 'fullchain'
  become: yes
  register: copy_certs

- name: Restart services
  ansible.builtin.include_tasks: tasks/restart-service-list.yaml
  when: copy_certs is changed
  loop: "{{ cert.hosts }}"
  loop_control:
    loop_var: _services
    label: '{{ _services.name }}'

# TODO:
# - Add multidomain support
# + restart relevant services
# + Move all config values to host
